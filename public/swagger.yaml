basePath: /api/v1
definitions:
  models.Question:
    properties:
      answerTimeInSeconds:
        type: integer
      questionId:
        type: string
      questionName:
        type: string
      questionText:
        type: string
      sequence:
        type: integer
      sessionId:
        type: string
    type: object
  models.QuestionMetadata:
    properties:
      answerText:
        type: string
      answerTimeInSeconds:
        type: integer
      importantKeywords:
        type: string
      questionId:
        type: string
      questionName:
        type: string
      questionText:
        type: string
      sequence:
        type: integer
      sessionId:
        type: string
    type: object
  models.Questions:
    properties:
      questions:
        items:
          $ref: '#/definitions/models.Question'
        type: array
    type: object
  models.Session:
    properties:
      description:
        type: string
      instructions:
        items:
          type: string
        type: array
      name:
        type: string
      sessionId:
        type: string
      totalTimeInSeconds:
        type: integer
    type: object
host: localhost:8083
info:
  contact:
    email: support@swagger.io
    name: Sai Kris
    url: http://www.swagger.io/support
  description: Interviews API  Golang to simplify the interview process.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Interviews API written in Golang
  version: "1.0"
paths:
  /answer-video/{candidateId}/{sessionId}/{questionId}:
    put:
      consumes:
      - multipart/form-data
      description: SaveAnswerVideo.
      parameters:
      - description: this is a test file
        in: formData
        name: file
        required: true
        type: file
      - description: Candidate id
        in: path
        name: candidateId
        required: true
        type: string
      - description: Session id
        in: path
        name: sessionId
        required: true
        type: string
      - description: Question id
        in: path
        name: questionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Token:
              description: qwerty
              type: string
          schema:
            $ref: '#/definitions/models.Session'
        "400": {}
        "404": {}
        "500": {}
      summary: SaveAnswerVideo.
  /interview-completion/{candidateId}/{sessionId}:
    post:
      consumes:
      - application/json
      description: called when the interview is completed.
      parameters:
      - description: Candidate id
        in: path
        name: candidateId
        required: true
        type: string
      - description: Session id
        in: path
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          headers:
            Token:
              description: qwerty
              type: string
        "400": {}
        "404": {}
        "500": {}
      summary: InterviewCompleted.
  /question:
    put:
      consumes:
      - application/json
      description: SaveQuestionMetadata saves question metadata.
      parameters:
      - description: Add account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.QuestionMetadata'
      produces:
      - application/json
      responses:
        "202": {}
        "400": {}
        "404": {}
        "500": {}
      summary: SaveQuestionMetadata saves question metadata.
  /question/{questionId}:
    get:
      consumes:
      - application/json
      description: Get Question video by question id.
      parameters:
      - description: question id
        in: path
        name: questionId
        required: true
        type: string
      produces:
      - video/mp4
      responses:
        "200":
          headers:
            Token:
              description: qwerty
              type: string
        "400": {}
        "404": {}
        "500": {}
      summary: Get Question video by question id.
  /questions:
    get:
      description: Get Questions by session id.
      parameters:
      - description: Session id
        in: query
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Token:
              description: qwerty
              type: string
          schema:
            $ref: '#/definitions/models.Questions'
        "400": {}
        "404": {}
        "500": {}
      summary: Get Questions by session id.
  /session:
    put:
      consumes:
      - application/json
      description: creates an interview session.
      parameters:
      - description: creates an interview session
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.Session'
      produces:
      - application/json
      responses:
        "202": {}
        "400": {}
        "404": {}
        "500": {}
      summary: creates an interview session.
  /session/{sessionId}:
    get:
      description: Get Session by session id.
      parameters:
      - description: Session id
        in: path
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Token:
              description: qwerty
              type: string
          schema:
            $ref: '#/definitions/models.Session'
        "400": {}
        "404": {}
        "500": {}
      summary: Get Session by session id.
swagger: "2.0"
